---
import { getMCPServers } from '../utils/teableApi.js';

// Define interface for MCP server data
interface MCPServer {
  id: string;
  fields: {
    name: string;
    description: string;
    version?: string;
    status?: string;
    author?: string;
    category?: string;
    language?: string;
    stars?: number;
    github_url?: string;
    npm_package?: string;
  };
}

// Fetch MCP servers from Teable CMS with fallback to static data
let mcpServers: MCPServer[] = [];
try {
  mcpServers = await getMCPServers() as MCPServer[];
} catch (error) {
  console.error('Failed to fetch from Teable, using static data:', error);
}

// Static fallback data if Teable fails or returns empty
const staticServers: MCPServer[] = [
  {
    id: 'github-mcp',
    fields: {
      name: 'GitHub MCP Server',
      description: 'Access GitHub repositories, issues, and pull requests directly through MCP. Perfect for AI assistants that need to interact with code repositories.',
      author: '@modelcontextprotocol',
      category: 'development',
      language: 'TypeScript',
      stars: 1200,
      github_url: 'https://github.com/modelcontextprotocol/servers',
      npm_package: '@modelcontextprotocol/server-github'
    }
  },
  {
    id: 'filesystem-mcp',
    fields: {
      name: 'File System MCP',
      description: 'Secure file operations with configurable access controls. Read, write, and manage files safely through AI conversations.',
      author: '@anthropic',
      category: 'productivity',
      language: 'Python',
      stars: 890,
      github_url: 'https://github.com/anthropics/mcp-filesystem',
      npm_package: '@anthropic/mcp-filesystem'
    }
  },
  {
    id: 'web-scraper-mcp',
    fields: {
      name: 'Web Scraper MCP',
      description: 'Extract and analyze web content efficiently. Built with Puppeteer for JavaScript-heavy sites and dynamic content.',
      author: '@community',
      category: 'web-scraping',
      language: 'JavaScript',
      stars: 654,
      github_url: 'https://github.com/mcp-community/web-scraper',
      npm_package: '@mcp/web-scraper'
    }
  },
  {
    id: 'database-mcp',
    fields: {
      name: 'Database MCP',
      description: 'Connect to PostgreSQL, MySQL, and SQLite databases. Execute queries and manage database operations through natural language.',
      author: '@dbtools',
      category: 'database',
      language: 'Go',
      stars: 432,
      github_url: 'https://github.com/dbtools/mcp-database',
      npm_package: '@dbtools/mcp-database'
    }
  },
  {
    id: 'slack-mcp',
    fields: {
      name: 'Slack MCP Server',
      description: 'Send messages, read channels, and manage Slack workspaces. Perfect for AI assistants that need to interact with team communication.',
      author: '@slackapi',
      category: 'communication',
      language: 'Python',
      stars: 567,
      github_url: 'https://github.com/slackapi/mcp-slack',
      npm_package: '@slack/mcp-server'
    }
  },
  {
    id: 'aws-mcp',
    fields: {
      name: 'AWS MCP Server',
      description: 'Manage AWS resources through MCP. Control EC2 instances, S3 buckets, and other AWS services with AI assistance.',
      author: '@aws-samples',
      category: 'cloud',
      language: 'Python',
      stars: 789,
      github_url: 'https://github.com/aws-samples/mcp-aws',
      npm_package: '@aws/mcp-server'
    }
  }
];

// Use Teable data if available, otherwise use static data
if (mcpServers.length === 0) {
  mcpServers = staticServers;
}

// Helper function to get the first letter of server name for icon
function getServerIcon(name: string): string {
  return name.charAt(0).toUpperCase();
}

// Helper function to format star count
function formatStars(stars?: number): string {
  if (!stars) return '';
  if (stars >= 1000) {
    return `★ ${(stars / 1000).toFixed(1)}k`;
  }
  return `★ ${stars}`;
}

// Helper function to get appropriate icon for category
function getCategoryIcon(category?: string): string {
  const icons: { [key: string]: string } = {
    development: 'github',
    productivity: 'folder',
    'web-scraping': 'globe',
    database: 'database',
    communication: 'message-circle',
    cloud: 'cloud',
    'file-system': 'folder'
  };
  return icons[category || ''] || 'box';
}
---

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MCP Directory</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lucide/0.263.1/umd/lucide.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .header {
            text-align: center;
            padding: 3rem 1rem 2rem;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header h1 {
            font-size: 3.5rem;
            font-weight: 800;
            background: linear-gradient(45deg, #fff, #e0e7ff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 0.5rem;
        }

        .header p {
            color: rgba(255, 255, 255, 0.9);
            font-size: 1.2rem;
            max-width: 600px;
            margin: 0 auto;
        }

        .search-section {
            padding: 2rem 1rem;
            max-width: 1200px;
            margin: 0 auto;
        }

        .search-bar {
            position: relative;
            max-width: 500px;
            margin: 0 auto 2rem;
        }

        .search-input {
            width: 100%;
            padding: 1rem 1rem 1rem 3rem;
            border: none;
            border-radius: 1rem;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            font-size: 1rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .search-input:focus {
            outline: none;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
            transform: translateY(-2px);
        }

        .search-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #666;
        }

        .categories {
            display: flex;
            gap: 0.5rem;
            justify-content: center;
            flex-wrap: wrap;
            margin-bottom: 2rem;
        }

        .category-tag {
            padding: 0.5rem 1rem;
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 2rem;
            color: white;
            text-decoration: none;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .category-tag:hover,
        .category-tag.active {
            background: rgba(255, 255, 255, 0.9);
            color: #333;
            transform: translateY(-2px);
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
        }

        .servers-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1.5rem;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
        }

        .server-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 1rem;
            padding: 1.5rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .server-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 16px 64px rgba(0, 0, 0, 0.15);
        }

        .server-header {
            display: flex;
            align-items: flex-start;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .server-icon {
            width: 48px;
            height: 48px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            border-radius: 0.75rem;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 1.2rem;
            flex-shrink: 0;
        }

        .server-title {
            flex: 1;
        }

        .server-title h3 {
            font-size: 1.25rem;
            font-weight: 600;
            color: #1a1a1a;
            margin-bottom: 0.25rem;
        }

        .server-author {
            color: #666;
            font-size: 0.9rem;
        }

        .server-description {
            color: #555;
            line-height: 1.6;
            margin-bottom: 1rem;
        }

        .server-meta {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .meta-tag {
            background: rgba(102, 126, 234, 0.1);
            color: #667eea;
            padding: 0.25rem 0.5rem;
            border-radius: 0.5rem;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .server-actions {
            display: flex;
            gap: 0.5rem;
        }

        .btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 0.5rem;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 16px rgba(102, 126, 234, 0.3);
        }

        .btn-secondary {
            background: rgba(0, 0, 0, 0.05);
            color: #666;
            border: 1px solid rgba(0, 0, 0, 0.1);
        }

        .btn-secondary:hover {
            background: rgba(0, 0, 0, 0.1);
        }

        .stats-section {
            text-align: center;
            padding: 2rem 1rem;
            color: rgba(255, 255, 255, 0.9);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 2rem;
            max-width: 800px;
            margin: 0 auto;
        }

        .stat-item {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 1.5rem;
            border-radius: 1rem;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            color: rgba(255, 255, 255, 0.8);
        }

        @media (max-width: 768px) {
            .header h1 {
                font-size: 2.5rem;
            }
            
            .servers-grid {
                grid-template-columns: 1fr;
            }
            
            .categories {
                gap: 0.25rem;
            }
            
            .category-tag {
                font-size: 0.8rem;
                padding: 0.4rem 0.8rem;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>MCP Directory</h1>
        <p>Discover and explore Model Context Protocol servers for enhanced AI capabilities</p>
    </div>

    <div class="search-section">
        <div class="search-bar">
            <i data-lucide="search" class="search-icon"></i>
            <input type="text" class="search-input" placeholder="Search MCP servers..." id="searchInput">
        </div>

        <div class="categories">
            <span class="category-tag active" data-category="all">All</span>
            <span class="category-tag" data-category="development">Development</span>
            <span class="category-tag" data-category="productivity">Productivity</span>
            <span class="category-tag" data-category="communication">Communication</span>
            <span class="category-tag" data-category="database">Database</span>
            <span class="category-tag" data-category="web-scraping">Web Scraping</span>
            <span class="category-tag" data-category="file-system">File System</span>
            <span class="category-tag" data-category="cloud">Cloud</span>
            <span class="category-tag" data-category="other">Other</span>
        </div>
    </div>

    <div class="servers-grid" id="serversGrid">
        {mcpServers.map((server) => (
            <div class="server-card" data-category={server.fields.category || 'other'}>
                <div class="server-header">
                    <div class="server-icon">{getServerIcon(server.fields.name)}</div>
                    <div class="server-title">
                        <h3>{server.fields.name}</h3>
                        <div class="server-author">{server.fields.author || ''}</div>
                    </div>
                </div>
                <div class="server-description">
                    {server.fields.description}
                </div>
                <div class="server-meta">
                    {server.fields.language && <span class="meta-tag">{server.fields.language}</span>}
                    {server.fields.author && <span class="meta-tag">{server.fields.author.includes('@') ? 'Official' : 'Community'}</span>}
                    {server.fields.stars && <span class="meta-tag">{formatStars(server.fields.stars)}</span>}
                </div>
                <div class="server-actions">
                    <a 
                        href={server.fields.github_url || '#'} 
                        class="btn btn-primary"
                        target={server.fields.github_url ? '_blank' : '_self'}
                        rel={server.fields.github_url ? 'noopener noreferrer' : ''}
                    >
                        <i data-lucide={getCategoryIcon(server.fields.category)} size="16"></i>
                        View Details
                    </a>
                    <button class="btn btn-secondary copy-btn" data-package={server.fields.npm_package || `mcp-${server.fields.name.toLowerCase().replace(/\s+/g, '-')}`}>
                        <i data-lucide="copy" size="16"></i>
                        Copy
                    </button>
                </div>
            </div>
        ))}
    </div>

    <div class="stats-section">
        <div class="stats-grid">
            <div class="stat-item">
                <div class="stat-number">127</div>
                <div class="stat-label">Total Servers</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">23</div>
                <div class="stat-label">Categories</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">85%</div>
                <div class="stat-label">Active Projects</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">12k+</div>
                <div class="stat-label">Downloads</div>
            </div>
        </div>
    </div>

    <script>
        // Initialize Lucide icons
        lucide.createIcons();

        // Search functionality
        const searchInput = document.getElementById('searchInput');
        const serversGrid = document.getElementById('serversGrid');
        const categoryTags = document.querySelectorAll('.category-tag');

        let currentCategory = 'all';

        // Search filter
        searchInput.addEventListener('input', filterServers);

        // Category filter
        categoryTags.forEach(tag => {
            tag.addEventListener('click', () => {
                categoryTags.forEach(t => t.classList.remove('active'));
                tag.classList.add('active');
                currentCategory = tag.dataset.category;
                filterServers();
            });
        });

        function filterServers() {
            const searchTerm = searchInput.value.toLowerCase();
            const cards = serversGrid.querySelectorAll('.server-card');

            cards.forEach(card => {
                const title = card.querySelector('h3').textContent.toLowerCase();
                const description = card.querySelector('.server-description').textContent.toLowerCase();
                const category = card.dataset.category;

                const matchesSearch = title.includes(searchTerm) || description.includes(searchTerm);
                const matchesCategory = currentCategory === 'all' || category === currentCategory;

                if (matchesSearch && matchesCategory) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        }

        // Copy functionality
        document.querySelectorAll('.copy-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.preventDefault();
                
                // Get package name from data attribute
                const packageName = btn.getAttribute('data-package');
                const copyText = packageName.startsWith('@') ? `npm install ${packageName}` : `npx ${packageName}`;
                
                // Copy to clipboard
                navigator.clipboard.writeText(copyText).then(() => {
                    const originalText = btn.innerHTML;
                    btn.innerHTML = '<i data-lucide="check" size="16"></i> Copied!';
                    lucide.createIcons();
                    
                    setTimeout(() => {
                        btn.innerHTML = originalText;
                        lucide.createIcons();
                    }, 2000);
                }).catch(() => {
                    // Fallback for browsers that don't support clipboard API
                    const textArea = document.createElement('textarea');
                    textArea.value = copyText;
                    document.body.appendChild(textArea);
                    textArea.select();
                    document.execCommand('copy');
                    document.body.removeChild(textArea);
                    
                    const originalText = btn.innerHTML;
                    btn.innerHTML = '<i data-lucide="check" size="16"></i> Copied!';
                    lucide.createIcons();
                    
                    setTimeout(() => {
                        btn.innerHTML = originalText;
                        lucide.createIcons();
                    }, 2000);
                });
            });
        });
    </script>
</body>
</html>